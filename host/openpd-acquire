#!/usr/bin/python

import time
import argparse
import openpd
import sys

def open_device(args):
    if args.raw:
        if args.device is None:
            raise RuntimeError('Must specify device path when running with --raw')
        else:
            return openpd.RawOpenPD(args.device.name)
    else:
        conn = openpd.Connection()
        if args.device is None:
            devices = conn.list_devices()
            if len(devices) == 0:
                raise RuntimeError('Daemon knows of no devices')
            return conn.device(devices[0])
        else:
            return conn.device(args.device.name)

def action(args):
    meter = open_device(args)
    output = args.output
    while True:
        power = meter.sample()['power']
        if args.timestamps:
            output.write('%f\t%g\n' % (time.time(), power))
        else:
            output.write('%g\n' % power)

        output.flush()
        time.sleep(args.period)

def list(args):
    conn = openpd.Connection()
    print 'Known OpenPD devices:'
    print
    print '\n'.join(conn.list_devices())
    sys.exit(0)

def main():
    parser = argparse.ArgumentParser(description='Periodically poll photodiode for power samples')
    subparsers = parser.add_subparsers()

    subp = subparsers.add_parser('list', help='List devices')
    subp.set_defaults(action=list)

    subp = subparsers.add_parser('acquire', help='Acquire data')
    subp.set_defaults(action=acquire)
    subp.add_argument('-t', '--timestamps', action='store_true', help='Emit timestamps with samples')
    subp.add_argument('-n', '--period', type=float, default=0.5, help='Sampling period in seconds')
    subp.add_argument('-d', '--device', type=str, help='Device ID to acquire from')
    subp.add_argument('-o', '--output', type=argparse.FileType('w'), default=sys.stdout,
                      help='Output file')
    subp.add_argument('-r', '--raw', action='store_true',
                      help='Connect directly to serial device (specify with --device)')

    args = parser.parse_args()
    args.action(args)

if __name__ == '__main__':
    main()

